{
  "name": "xbee",
  "version": "0.0.4",
  "description": "Node talks to xbee radios through serialport",
  "author": {
    "name": "Richard Morrison",
    "email": "richard@rmorrison.net"
  },
  "main": "./xbee",
  "keywords": [
    "xbee",
    "serialport",
    "robots",
    "sensors",
    "automation",
    "control"
  ],
  "homepage": "https://github.com/mozz100/node-xbee",
  "repository": {
    "type": "git",
    "url": "git://github.com/mozz100/node-xbee.git"
  },
  "readme": "This module lets you bridge the real world to Node.js.  Connect to sensors, robots, turn things on and off, take remote measurements.  In fact if you find a creative use for this stuff, let me know!  I'd be proud to hear of it being taken advantage of.\n\n(made up Javascript code to get your imagination going)\n\n    frontdoor.on(\"open\", function() {\n      if (alarm.state == \"on\") {\n        alarm.sound();\n        hounds.release();\n      } else {\n        lights.switchOn();\n        voice.speak(\"Welcome home\");\n      }\n    });\n\nBackground\n==========\n\n[Digi's xbee modules](http://www.digi.com/xbee) are good for quickly building low power wireless networks.\n\nThey can be connected to a computer over RS232 and communicated on using a standard serial port.\n\nEven easier, with something like the [XBee USB Explorer](http://www.sparkfun.com/products/8687) by SparkFun, you can connect to them easily over USB.\n\nThis work is inspired by:\n\n* voodootikigod's [serialport module](https://github.com/voodootikigod/node-serialport) (in fact you're going to need this to use this package)\n* \"[Building Wireless Sensor Networks](http://shop.oreilly.com/product/9780596807740.do)\" by Rob Faludi\n\nSetup\n=====\n\nI have my xbee coordinator radio connected to the computer running Node.  Crucially, the coordinator is in xbee's API mode - this is required to allow you to send remote instructions, and so on.\n\nMy remote xbee network modules send periodic measurements and I can push them to web browsers, save them in a database, etc.\n\nI can also use this library to send remote commands and query remote xbee modules.  For instance, setting a digital output on a remote module could turn a light on, or a motor, or a laser beam - up to you!\n\nHow To Use\n==========\n\nLike node-serialport, using this is \"pretty easy because it is pretty basic. It provides you with the building block to make great things, it is not a complete solution - just a cog in the (world domination) machine.\"\n\nTo Install\n----------\n\nYou'll need serialport as well (this module doesn't depend on it, but it provides a parser so this is the intended use pattern)\n\n    npm install serialport\n    npm install xbee\n\nTo Use\n------\n\nOpen a serial port and give the xbee parser as an option:\n\n    var serial_xbee = new SerialPort(\"/dev/ttyUSB0\", { \n      parser: xbee.packetParser()\n    });\n\nThen listen for incoming xbee packets like this:\n\n    serial_xbee.on(\"data\", function(data) {\n      console.log('xbee data received:', data.type);    \n    });\n\n(the __data__ object passed has lot more packet-type-dependent properties)\n\nSend remote AT commands (e.g. query remote module, or \"release the hounds\"):\n\n    // execute an AT command on a remote xbee module\n    function RemoteAT(cmd, val, remote64, remote16) {\n      var atc = new xbee.RemoteATCommand();\n      atc.setCommand(cmd);\n      atc.commandParameter = val;\n      atc.destination64 = remote64;\n      atc.destination16 = remote16;\n      b = atc.getBytes();\n      serial_xbee.write(b);\n      //console.log('Wrote bytes to serial port', b);\n    }\n\n    // simple example: query ATD0 on remote xbee module.\n    var remote64 = [0x00,0x13,0xa2,0x00,0x40,0x7a,0x1f,0x95];  // <-- you'll need to replace this with the 64-bit hex address of your module\n    var remote16 = [0xff,0xfe]; // <-- put the 16 bit address of remote module here, if known. Otherwise use [0xff, 0xfe]\n\n    RemoteAT('D0', null, remote64, remote16);\n\nSee __example.js__ for a full working example (you'll need to use your own xbee IDs, though).\n\nLicence\n-------\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/2.0/uk/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"http://i.creativecommons.org/l/by-sa/2.0/uk/88x31.png\" /></a><br />This work by <span xmlns:cc=\"http://creativecommons.org/ns#\" property=\"cc:attributionName\">Richard Morrison</span> is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/2.0/uk/\">Creative Commons Attribution-ShareAlike 2.0 UK: England &amp; Wales License</a>.<br />Based on a work at <a xmlns:dct=\"http://purl.org/dc/terms/\" href=\"https://github.com/mozz100/node-xbee\" rel=\"dct:source\">github.com</a>.\n",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/mozz100/node-xbee/issues"
  },
  "_id": "xbee@0.0.4",
  "_from": "xbee@"
}
